@page "/"
@using System.Text.RegularExpressions
@rendermode InteractiveServer

@inject SaolWords FiveLetterWords
@inject MatchiWords MatchiFiveLetterWords

<PageTitle>Ordle Game</PageTitle>

<h1>Ordle Game</h1>
<!-- <div>Random Word: @randomWord</div> -->

<style>
    .ordle-square {
        display: inline-block;
        width: 38px;
        text-align: center;
        border: 2px solid #888;
        border-radius: 4px;
        margin: 1px;
        font-size: 1.5rem;
        font-weight: bold;
        vertical-align: middle;
    }
    .ordle-correct {
        background-color: limegreen;
        color: white;
    }
    .ordle-present {
        background-color: yellow;
    }
    .ordle-input {
        width: calc(38px * 5 + 8px); /* 5 letters * 38px + 4*2px margin */
        font-size: 1.5rem;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 2px;
        display: inline-block;
        vertical-align: middle;
    }
    .ordle-guess-list {
        padding-left: 0;
        margin-bottom: 5px;
    }
</style>

<div>
    <p>Guess the random 5 letter word</p>
    <h4>Guesses</h4>
    <ul class="ordle-guess-list">
        @for (var i = 0; i < MaxGuesses; i++)
        {
            if (i < guesses.Count)
            {
                <li style="list-style-type: none;">
                    @for (int j = 0; j < GuessLength; j++)
                    {
                        var guessChar = guesses[i][j];
                        var isCorrectPosition = j < randomWord.Length && guessChar == randomWord[j];
                        var isInWord = !isCorrectPosition && randomWord.Contains(guessChar, StringComparison.OrdinalIgnoreCase);
                        var cssClass = "ordle-square";
                        if (isCorrectPosition)
                            cssClass += " ordle-correct";
                        else if (isInWord)
                            cssClass += " ordle-present";
                        <span class="@cssClass">@guessChar</span>
                    }
                </li>
            }
            else
            {
                <li style="list-style-type: none;">
                    @for (int j = 0; j < GuessLength; j++)
                    {
                        <span class="ordle-square">&nbsp;</span>
                    }
                </li>
            }
        }
    </ul>
</div>

<div>
    <input @ref="inputRef"
           @bind="userInput"
           maxlength="@GuessLength"
           minlength="@GuessLength"
           pattern="[A-Za-zÅÄÖåäö]{@GuessLength}"
           title="Guess a @GuessLength letter word"
           type="text"
           autocomplete="off"
           aria-label="Ordle guess input"
           class="form-control ordle-input"
           @oninput="ForceUppercase"
           @onkeydown="HandleKeyDown"
           disabled="@(guesses.Count >= MaxGuesses || !string.IsNullOrEmpty(successMessage))"
    />
</div>
<br/>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
        <button class="btn btn-link" @onclick="RestartGame">Restart</button>
    </div>
}
@if (guesses.Count >= MaxGuesses && string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-warning" role="alert">
        Game Over! The word was '@randomWord'.
        <button class="btn btn-link" @onclick="RestartGame">Restart</button>
    </div>
}
<p>
    <button class="btn btn-primary" @onclick="SubmitGuess" disabled="@(guesses.Count >= MaxGuesses || !string.IsNullOrEmpty(successMessage))">Submit Guess</button>
</p>

<div style="margin-bottom: 1rem;">
    <button type="button"
            class="btn btn-info"
            style="position: relative;"
            @onclick="ToggleHelp">
        Help?
    </button>
    @if (showHelp)
    {
        <div style="position: absolute; z-index: 1000; background: #fff; border: 1px solid #ccc; border-radius: 8px; padding: 1rem; max-width: 400px; box-shadow: 0 2px 8px rgba(0,0,0,0.15); margin-top: 0.5rem;">
            <strong>How to play:</strong>
            <ul>
                <li>Guess the hidden Swedish 5-letter word in @MaxGuesses tries.</li>
                <li>Each guess must be a valid Swedish word from the SAOL word list.</li>
                <li>After each guess, the color of the tiles will change to show how close your guess was to the word:
                    <ul>
                        <li><span style="background:limegreen;color:white;padding:2px 6px;border-radius:3px;">Green</span>: Correct letter in the correct position.</li>
                        <li><span style="background:yellow;padding:2px 6px;border-radius:3px;">Yellow</span>: Correct letter in the wrong position.</li>
                        <li>No color: Letter is not in the word.</li>
                    </ul>
                </li>
                <li>No duplicate guesses allowed.</li>
            </ul>
            <strong>Word List Source:</strong>
            <div style="font-size:0.95em;">
                The word list is based on Swedish 5-letter words from SAOL (Svenska Akademiens ordlista), versions 13 and 14.<br/>
                Only words containing the letters A-Z, Å, Ä, Ö are included.
            </div>
            <button class="btn btn-sm btn-secondary mt-2" @onclick="ToggleHelp">Close</button>
        </div>
    }
</div>
<br/>
<hr/>
<p>
    <div class="list-group">
        <div class="list-group-item">TheSweMaster © @DateTime.Now.Year</div>
        <div class="list-group-item">Github: <a target="_blank" href="https://github.com/TheSweMaster">https://github.com/TheSweMaster</a></div>
        <div class="list-group-item">YouTube: <a target="_blank" href="https://www.youtube.com/c/theswemaster/videos">https://www.youtube.com/c/theswemaster/videos</a></div>
    </div>
</p>

@code {
    private const int MaxGuesses = 6;
    private const int GuessLength = 5;
    private string userInput = string.Empty;
    private HashSet<string> selected5LetterWordList => FiveLetterWords?.Words ?? new HashSet<string>();
    private List<string> guesses = new();
    private ElementReference inputRef;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private static readonly Random rng = new();
    private string randomWord = string.Empty;
    private bool showHelp = false;

    protected override async Task OnInitializedAsync()
    {
        SetRandomWord();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await inputRef.FocusAsync();
        }
    }

    private void SubmitGuess()
    {
        if (guesses.Count >= MaxGuesses || !string.IsNullOrEmpty(successMessage))
            return;

        errorMessage = string.Empty;
        successMessage = string.Empty;

        var guessUpper = userInput.ToUpper();

        if (string.IsNullOrWhiteSpace(userInput))
        {
            errorMessage = "Input cannot be empty.";
        }
        else if (userInput.Length != GuessLength)
        {
            errorMessage = $"Input must be exactly {GuessLength} letters.";
        }
        else if (!Regex.IsMatch(userInput, @$"^[A-Za-zÅÄÖåäö]{{{GuessLength}}}$"))
        {
            errorMessage = "Input must only contain letters A-Z, Å, Ä, Ö.";
        }
        else if (!selected5LetterWordList.Contains(guessUpper))
        {
            errorMessage = "Word not found in word list.";
        }
        else if (guesses.Contains(guessUpper))
        {
            errorMessage = "You have already guessed that word.";
        }
        else
        {
            guesses.Add(guessUpper);

            if (guessUpper == randomWord)
            {
                successMessage = $"Correct! You guessed the word '{randomWord}' in {guesses.Count} guesses.";
            }

            userInput = string.Empty;
        }

        _ = Task.Run(async () => await inputRef.FocusAsync());
    }

    private void ForceUppercase(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? string.Empty;
        userInput = value.ToUpper();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (guesses.Count < MaxGuesses && string.IsNullOrEmpty(successMessage))
            {
                SubmitGuess();
            }
        }
    }

    private void RestartGame()
    {
        guesses.Clear();
        userInput = string.Empty;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        SetRandomWord();
        _ = Task.Run(async () => await inputRef.FocusAsync());
    }

    private void SetRandomWord()
    {
        if (selected5LetterWordList == null || selected5LetterWordList.Count == 0)
        {
            randomWord = string.Empty;
            errorMessage = "Word list is empty.";
            return;
        }

        var index = rng.Next(selected5LetterWordList.Count);
        randomWord = selected5LetterWordList.ElementAt(index);
    }

    private void ToggleHelp()
    {
        showHelp = !showHelp;
    }
}